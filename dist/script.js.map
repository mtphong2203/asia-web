{"version":3,"sources":["script.js"],"names":["english","document","getElementById","textContent","vietnamese","darkButton","lightButton","setDarkMode","querySelector","classList","localStorage","setItem","setLightMode","colorModeFromLocalStorage","getItem","loadAndUpdateColor","click","radioButton","querySelectorAll","forEach","button","addEventListener","event","checked","valueDisplays","interval","startCounting","valueDisplay","startValue","endValue","parseInt","getAttribute","duration","Math","floor","counter","setInterval","clearInterval","checkPosition","rect","getBoundingClientRect","windowHeight","window","innerHeight","top","bottom","contains","add"],"mappings":"AAAA,aAAA,IAAMA,QAAUC,SAASC,eAAe,WAAWC,aAAe,UAC5DC,WAAaH,SAASC,eAAe,WAAWC,aAAe,UAE/DE,WAAaJ,SAASC,eAAe,QACrCI,YAAcL,SAASC,eAAe,SAEtCK,YAAc,WAChBN,SAASO,cAAc,QAAQC,UAAY,OAC3CC,aAAaC,QAAQ,YAAa,OACtC,EAEMC,aAAe,WACjBX,SAASO,cAAc,QAAQC,UAAY,QAC3CC,aAAaC,QAAQ,YAAa,QACtC,EAEME,0BAA4B,WAC9B,OAAOH,aAAaI,QAAQ,YAChC,EAOMC,mBAAqB,WAGd,QADKF,4BACIR,WAAWW,QAAUV,YAAYU,OACvD,EAGMC,YAAchB,SAASiB,iBAAiB,0BAC9CD,YAAYE,SAAQ,SAAAC,GAChBA,EAAOC,iBAAiB,SAAS,SAACC,GAC9BhB,YAAYiB,QAAUX,eAAiBL,aAC3C,GACJ,IAOAQ,qBAMA,IAAMS,cAAgBvB,SAASiB,iBAAiB,QAC1CO,SAAW,IAEjB,SAASC,cAAcC,GACnB,IAAIC,EAAa,EACbC,EAAWC,SAASH,EAAaI,aAAa,aAC9CC,EAAWC,KAAKC,MAAMT,SAAWI,GACjCM,EAAUC,aAAY,WACtBR,GAAc,EACdD,EAAaxB,YAAcyB,EAEvBA,IAAeC,GACfQ,cAAcF,EAEtB,GAAGH,EACP,CAIA,SAASM,gBACLd,cAAcL,SAAQ,SAACQ,GACnB,IAAMY,EAAOZ,EAAaa,wBACpBC,EAAeC,OAAOC,YAEzBJ,EAAKK,KAAsB,GAAfH,GAAsBF,EAAKM,QAAU,IAC3ClB,EAAalB,UAAUqC,SAAS,aACjCpB,cAAcC,GACdA,EAAalB,UAAUsC,IAAI,YAIvC,GACJ,CAEAL,OAAOrB,iBAAiB,SAAUiB,eAElCA","file":"script.js","sourcesContent":["const english = document.getElementById(\"english\").textContent += \"English\"\r\nconst vietnamese = document.getElementById(\"vietnam\").textContent += \"VietNam\"\r\n\r\nconst darkButton = document.getElementById(\"dark\")\r\nconst lightButton = document.getElementById(\"light\")\r\n\r\nconst setDarkMode = () => {\r\n    document.querySelector(\"body\").classList = \"dark\";\r\n    localStorage.setItem(\"colorMode\", \"dark\");\r\n};\r\n\r\nconst setLightMode = () => {\r\n    document.querySelector(\"body\").classList = \"light\";\r\n    localStorage.setItem(\"colorMode\", \"light\");\r\n};\r\n\r\nconst colorModeFromLocalStorage = () => {\r\n    return localStorage.getItem(\"colorMode\");\r\n};\r\n\r\n// const colorModeFromPreferences = () => {\r\n//     // If preference is set or does not match anything (light is default)\r\n//     return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\r\n// };\r\n\r\nconst loadAndUpdateColor = () =>{\r\n    // local storage has precendence over the prefers-color-scheme\r\n    const color = colorModeFromLocalStorage();\r\n    color == \"dark\" ? darkButton.click() : lightButton.click();\r\n};\r\n\r\n// when the inputs are clicked, check which radio button is checked and change the color\r\nconst radioButton = document.querySelectorAll(\".toggle__wrapper input\");\r\nradioButton.forEach(button =>{\r\n    button.addEventListener(\"click\", (event) =>{\r\n        lightButton.checked ? setLightMode() : setDarkMode();\r\n    });\r\n});\r\n// when the prefers-color-scheme changes, this event will be emitted\r\n// event reflects the media query, if it matches, the new color is dark, else it is light\r\n// window.matchMedia(\"(prefers-color-scheme:dark)\").addEventListener(\"change\", (event) =>{\r\n//     event.matches ? dartButton.click() : lightButton.click(); \r\n// });\r\n// Load the right color on startup - localStorage has precedence\r\nloadAndUpdateColor();\r\n\r\n\r\n\r\n// Count number\r\n\r\nconst valueDisplays = document.querySelectorAll(\".num\");\r\nconst interval = 5000;\r\n\r\nfunction startCounting(valueDisplay){\r\n    let startValue = 0;\r\n    let endValue = parseInt(valueDisplay.getAttribute(\"data-val\"));\r\n    let duration = Math.floor(interval / endValue);\r\n    let counter = setInterval(function() {\r\n        startValue += 1;\r\n        valueDisplay.textContent = startValue;\r\n\r\n        if (startValue === endValue) {\r\n            clearInterval(counter);\r\n        }\r\n    }, duration);\r\n}\r\n\r\n\r\n// check position\r\nfunction checkPosition(){\r\n    valueDisplays.forEach((valueDisplay) => {\r\n        const rect = valueDisplay.getBoundingClientRect();\r\n        const windowHeight = window.innerHeight;\r\n\r\n        if(rect.top <= windowHeight * 0.9 && rect.bottom >= 0){\r\n            if (!valueDisplay.classList.contains('counted')) {\r\n                startCounting(valueDisplay);\r\n                valueDisplay.classList.add('counted'); // Prevents counting again\r\n            }\r\n        }\r\n\r\n    });\r\n}\r\n\r\nwindow.addEventListener('scroll', checkPosition);\r\n\r\ncheckPosition();\r\n"]}